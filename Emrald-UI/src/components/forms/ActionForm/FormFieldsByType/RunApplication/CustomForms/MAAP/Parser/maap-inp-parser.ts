// @generated by Peggy 5.0.5.
//
// https://peggyjs.org/

class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = 'SyntaxError';
  }

  format(sources) {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find((s) => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s =
        this.location.source && typeof this.location.source.offset === 'function'
          ? this.location.source.offset(s)
          : s;
      const loc = this.location.source + ':' + offset_s.line + ':' + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = ''.padEnd(offset_s.line.toString().length, ' ');
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = last - s.column || 1;
        str +=
          '\n --> ' +
          loc +
          '\n' +
          filler +
          ' |\n' +
          offset_s.line +
          ' | ' +
          line +
          '\n' +
          filler +
          ' | ' +
          ''.padEnd(s.column - 1, ' ') +
          ''.padEnd(hatLen, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, 'unicode')
      ? new RegExp('[\\p{C}\\p{Mn}\\p{Mc}]', 'gu')
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable, (ch) => '\\u{' + hex(ch) + '}');
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(
        s
          .replace(/\\/g, '\\\\')
          .replace(/"/g, '\\"')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g, (ch) => '\\x0' + hex(ch))
          .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => '\\x' + hex(ch)),
      );
    }

    function classEscape(s) {
      return unicodeEscape(
        s
          .replace(/\\/g, '\\\\')
          .replace(/\]/g, '\\]')
          .replace(/\^/g, '\\^')
          .replace(/-/g, '\\-')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g, (ch) => '\\x0' + hex(ch))
          .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => '\\x' + hex(ch)),
      );
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return '"' + literalEscape(expectation.text) + '"';
      },

      class(expectation) {
        const escapedParts = expectation.parts.map((part) =>
          Array.isArray(part)
            ? classEscape(part[0]) + '-' + classEscape(part[1])
            : classEscape(part),
        );

        return (
          '[' +
          (expectation.inverted ? '^' : '') +
          escapedParts.join('') +
          ']' +
          (expectation.unicode ? 'u' : '')
        );
      },

      any() {
        return 'any character';
      },

      end() {
        return 'end of input';
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + ' or ' + descriptions[1];

        default:
          return (
            descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1]
          );
      }
    }

    function describeFound(found) {
      return found ? '"' + literalEscape(found) + '"' : 'end of input';
    }

    return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    Start: peg$parseStart,
  };
  let peg$startRuleFunction = peg$parseStart;

  const peg$c0 = '\n';
  const peg$c1 = '\r\n';
  const peg$c2 = '//';
  const peg$c3 = '!';
  const peg$c4 = 'C ';
  const peg$c5 = '**';
  const peg$c6 = '/';
  const peg$c7 = '-';
  const peg$c8 = '.';
  const peg$c9 = '0';
  const peg$c10 = 'e';
  const peg$c11 = '#';
  const peg$c12 = 'action';
  const peg$c13 = 'alias';
  const peg$c14 = 'and';
  const peg$c15 = 'as';
  const peg$c16 = 'dose parameter file';
  const peg$c17 = 'end';
  const peg$c18 = 'end time';
  const peg$c19 = 'false';
  const peg$c20 = 'function';
  const peg$c21 = 'if';
  const peg$c22 = 'include';
  const peg$c23 = 'initiator';
  const peg$c24 = 's';
  const peg$c25 = 'is';
  const peg$c26 = 'lookup variable';
  const peg$c27 = 'off';
  const peg$c28 = 'on';
  const peg$c29 = 'or';
  const peg$c30 = 'parameter change';
  const peg$c31 = 'parameter file';
  const peg$c32 = 'plotfil';
  const peg$c33 = 'sensitivity';
  const peg$c34 = 'set';
  const peg$c35 = 'timer';
  const peg$c36 = 'title';
  const peg$c37 = 'true';
  const peg$c38 = 'userevt';
  const peg$c39 = 'when';
  const peg$c40 = ',';
  const peg$c41 = '(';
  const peg$c42 = ')';
  const peg$c43 = '>=';
  const peg$c44 = '<=';
  const peg$c45 = '!=';
  const peg$c46 = '==';
  const peg$c47 = '=';

  const peg$r0 = /^[\t\v-\f \xA0\uFEFF]/;
  const peg$r1 = /^[\n\r\u2028\u2029]/;
  const peg$r2 = /^[\r\u2028-\u2029]/;
  const peg$r3 = /^[a-zA-Z0-9]/;
  const peg$r4 = /^[$0-9A-Z\\_a-z]/;
  const peg$r5 = /^[0-9]/;
  const peg$r6 = /^[1-9]/;
  const peg$r7 = /^[+\-]/;
  const peg$r8 = /^[FT]/i;
  const peg$r9 = /^[a-zA-Z]/;
  const peg$r10 = /^[a-zA-Z0-9_]/;
  const peg$r11 = /^[a-zA-Z0-9:()|]/;
  const peg$r12 = /^[*\/]/;
  const peg$r13 = /^[+\-<>]/;

  const peg$e0 = peg$anyExpectation();
  const peg$e1 = peg$classExpectation(
    ['\t', ['\v', '\f'], ' ', '\xA0', '\uFEFF'],
    false,
    false,
    false,
  );
  const peg$e2 = peg$classExpectation(['\n', '\r', '\u2028', '\u2029'], false, false, false);
  const peg$e3 = peg$literalExpectation('\n', false);
  const peg$e4 = peg$literalExpectation('\r\n', false);
  const peg$e5 = peg$classExpectation(['\r', ['\u2028', '\u2029']], false, false, false);
  const peg$e6 = peg$literalExpectation('//', false);
  const peg$e7 = peg$literalExpectation('!', false);
  const peg$e8 = peg$literalExpectation('C ', false);
  const peg$e9 = peg$literalExpectation('**', false);
  const peg$e10 = peg$classExpectation(
    [
      ['a', 'z'],
      ['A', 'Z'],
      ['0', '9'],
    ],
    false,
    false,
    false,
  );
  const peg$e11 = peg$literalExpectation('/', false);
  const peg$e12 = peg$literalExpectation('-', false);
  const peg$e13 = peg$classExpectation(
    ['$', ['0', '9'], ['A', 'Z'], '\\', '_', ['a', 'z']],
    false,
    false,
    false,
  );
  const peg$e14 = peg$literalExpectation('.', false);
  const peg$e15 = peg$classExpectation([['0', '9']], false, false, false);
  const peg$e16 = peg$literalExpectation('0', false);
  const peg$e17 = peg$classExpectation([['1', '9']], false, false, false);
  const peg$e18 = peg$literalExpectation('e', true);
  const peg$e19 = peg$classExpectation(['+', '-'], false, false, false);
  const peg$e20 = peg$classExpectation(['F', 'T'], false, true, false);
  const peg$e21 = peg$classExpectation(
    [
      ['a', 'z'],
      ['A', 'Z'],
    ],
    false,
    false,
    false,
  );
  const peg$e22 = peg$classExpectation(
    [['a', 'z'], ['A', 'Z'], ['0', '9'], '_'],
    false,
    false,
    false,
  );
  const peg$e23 = peg$classExpectation(
    [['a', 'z'], ['A', 'Z'], ['0', '9'], ':', '(', ')', '|'],
    false,
    false,
    false,
  );
  const peg$e24 = peg$literalExpectation('#', false);
  const peg$e25 = peg$literalExpectation('ACTION', true);
  const peg$e26 = peg$literalExpectation('ALIAS', true);
  const peg$e27 = peg$literalExpectation('AND', true);
  const peg$e28 = peg$literalExpectation('AS', true);
  const peg$e29 = peg$literalExpectation('DOSE PARAMETER FILE', true);
  const peg$e30 = peg$literalExpectation('END', true);
  const peg$e31 = peg$literalExpectation('END TIME', true);
  const peg$e32 = peg$literalExpectation('FALSE', true);
  const peg$e33 = peg$literalExpectation('FUNCTION', true);
  const peg$e34 = peg$literalExpectation('IF', true);
  const peg$e35 = peg$literalExpectation('INCLUDE', true);
  const peg$e36 = peg$literalExpectation('INITIATOR', true);
  const peg$e37 = peg$literalExpectation('S', true);
  const peg$e38 = peg$literalExpectation('IS', true);
  const peg$e39 = peg$literalExpectation('LOOKUP VARIABLE', true);
  const peg$e40 = peg$literalExpectation('OFF', true);
  const peg$e41 = peg$literalExpectation('ON', true);
  const peg$e42 = peg$literalExpectation('OR', true);
  const peg$e43 = peg$literalExpectation('PARAMETER CHANGE', true);
  const peg$e44 = peg$literalExpectation('PARAMETER FILE', true);
  const peg$e45 = peg$literalExpectation('PLOTFIL', true);
  const peg$e46 = peg$literalExpectation('SENSITIVITY', true);
  const peg$e47 = peg$literalExpectation('SET', true);
  const peg$e48 = peg$literalExpectation('TIMER', true);
  const peg$e49 = peg$literalExpectation('TITLE', true);
  const peg$e50 = peg$literalExpectation('TRUE', true);
  const peg$e51 = peg$literalExpectation('USEREVT', true);
  const peg$e52 = peg$literalExpectation('WHEN', true);
  const peg$e53 = peg$literalExpectation(',', false);
  const peg$e54 = peg$literalExpectation('(', false);
  const peg$e55 = peg$literalExpectation(')', false);
  const peg$e56 = peg$classExpectation(['*', '/'], false, false, false);
  const peg$e57 = peg$literalExpectation('>=', false);
  const peg$e58 = peg$literalExpectation('<=', false);
  const peg$e59 = peg$classExpectation(['+', '-', '<', '>'], false, false, false);
  const peg$e60 = peg$literalExpectation('!=', false);
  const peg$e61 = peg$literalExpectation('==', false);
  const peg$e62 = peg$literalExpectation('=', false);

  function peg$f0(preamble, value, epilogue) {
    return {
      type: 'program',
      value,
      comments: [preamble ? preamble[0] : [], epilogue.map((e) => e[1])],
    };
  }
  function peg$f1(c) {
    return c;
  }
  function peg$f2(value) {
    return value.map((v) => v[1]).join('');
  }
  function peg$f3(first, rest) {
    return first.join('') + (rest ? rest[0] + rest[1] : '');
  }
  function peg$f4(negative, literal, units) {
    return {
      type: 'number',
      units: (units || [])[1],
      value: negative !== null ? -literal : literal,
    };
  }
  function peg$f5() {
    return parseFloat(text());
  }
  function peg$f6() {
    return parseFloat(text());
  }
  function peg$f7() {
    return parseFloat(text());
  }
  function peg$f8(v) {
    return { type: 'boolean', value: v === 'TRUE' || v === 'T' };
  }
  function peg$f9(value) {
    return { type: 'identifier', value: value.join('') };
  }
  function peg$f10(head, tail) {
    let value = head.join('');
    if (tail) {
      value += ' ' + tail.map((item) => item[2].join('')).join(' ');
    }
    return {
      type: 'parameter_name',
      value,
    };
  }
  function peg$f11(index, flag, value) {
    return {
      flag: (flag || [])[0],
      index: Number(index.join('')),
      type: 'parameter',
      value,
    };
  }
  function peg$f12(n) {
    return { type: 'timer', value: Number(n.join('')) };
  }
  function peg$f13() {
    return 'INITIATORS';
  }
  function peg$f14(v) {
    return v.filter((x) => x.type === 'comment');
  }
  function peg$f15(v) {
    return v.filter((x) => x.type === 'comment');
  }
  function peg$f16(value, rest) {
    return [value].concat(rest ? rest[3] : []);
  }
  function peg$f17(value, args) {
    return {
      arguments: args || [],
      type: 'call_expression',
      value,
    };
  }
  function peg$f18(left, op, right) {
    return {
      type: 'expression',
      left,
      op,
      right,
    };
  }
  function peg$f19(value, units) {
    return {
      type: 'expression_block',
      value,
      units: units ?? undefined,
    };
  }
  function peg$f20(target, value) {
    return {
      target,
      type: 'assignment',
      value,
    };
  }
  function peg$f21(target, value) {
    return {
      target:
        target === 'END TIME'
          ? {
              type: 'parameter_name',
              value: 'END TIME',
            }
          : target,
      type: 'is_expression',
      value,
    };
  }
  function peg$f22(target, value) {
    return {
      target,
      type: 'as_expression',
      value,
    };
  }
  function peg$f23(first, comment, op, rest) {
    return {
      type: 'multi_expression',
      op,
      value: [first, rest],
      comments: comment ? comment[1] : [],
    };
  }
  function peg$f24(value) {
    return { type: 'sensitivity', value };
  }
  function peg$f25(comment, value, epilogue) {
    let innerComments = [];
    if (value) {
      innerComments = value.map((v) => v[0].comments)[0] ?? [];
    }
    return {
      type: 'title',
      value: value.map((v) => v[0].title).join('\n'),
      comment: [[comment, ...innerComments], epilogue ? [...epilogue[0]] : []],
    };
  }
  function peg$f26(preamble, title, epilogue) {
    let comments = [];
    if (preamble) {
      comments = comments.concat(preamble[0]);
    }
    if (epilogue) {
      comments.push(epilogue);
    }
    return { title: title.join(''), comments };
  }
  function peg$f27(fileType, value) {
    return {
      fileType,
      type: 'file',
      value: value.join(''),
    };
  }
  function peg$f28(blockType, comment, value, epilogue) {
    return {
      blockType,
      type: 'block',
      value: value ? value[1] : [],
      comment: [[comment], epilogue ? epilogue[1] : []],
    };
  }
  function peg$f29(blockType, test, comment, value, epilogue) {
    return {
      blockType,
      test,
      type: 'conditional_block',
      value: value ? value[1] : [],
      comment: [comment ? [comment[1]] : [], epilogue ? epilogue[1] : []],
    };
  }
  function peg$f30(comment1, value, comment2) {
    return {
      type: 'alias',
      value: value ? value[0] : [],
      comment: [[comment1], comment2[0]],
    };
  }
  function peg$f31(n, comment1, value, comment2) {
    return {
      n: Number(n.join('')),
      type: 'plotfil',
      value: value.length > 0 ? value.map((v) => v[1])[0] : [],
      comment: [comment1 ? [comment1[1]] : [], comment2 ? [...comment2[1]] : []],
    };
  }
  function peg$f32(head, tail) {
    return tail.length > 0 ? [head].concat(tail.map((t) => t[3])[0]) : [head];
  }
  function peg$f33(preamble, head, epilogue, tail) {
    let comments = [];
    if (preamble) {
      comments = comments.concat(preamble[0]);
    }
    if (epilogue) {
      comments.push(epilogue[1]);
    }
    return [
      {
        row: head,
        comments,
      },
    ].concat(tail.length > 0 ? tail.map((t) => t[1])[0] : []);
  }
  function peg$f34(comment1, value, comment2) {
    return {
      type: 'user_evt',
      value: value ? value[0] : [],
      comment: [comment1 ? [comment1[1]] : [], comment2 ? comment2[0] : []],
    };
  }
  function peg$f35(n, comment1, value, comment2) {
    return {
      index: Number(n.join('')),
      type: 'action',
      value: value ? value[0] : [],
      comment: [comment1 ? [comment1[1]] : [], comment2 ? comment2[0] : []],
    };
  }
  function peg$f36(name, value) {
    return {
      name,
      type: 'function',
      value,
    };
  }
  function peg$f37(value) {
    return {
      type: 'set_timer',
      value,
    };
  }
  function peg$f38(name, comment, value) {
    return {
      name,
      type: 'lookup_variable',
      value: value ? value[1] : [],
      comment: [comment ? [comment[1]] : [], []],
    };
  }
  function peg$f39(head, tail) {
    return [head.join('')].concat(tail ? tail[1] : []);
  }
  function peg$f40(first, rest) {
    return [first].concat(rest ? rest[1] : []);
  }
  function peg$f41(preamble, element, epilogue, next) {
    let comments = [[], []];
    if (preamble) {
      comments[0] = comments[0].concat(preamble[0]);
    }
    if (element.comment) {
      if (Array.isArray(element.comment)) {
        comments[0] = comments[0].concat(element.comment[0].filter((c) => c != null));
        comments[1] = comments[1].concat(element.comment[1].filter((c) => c != null));
      } else {
        comments.push(element.comment);
      }
    }
    delete element.comment;
    if (epilogue) {
      comments[1].push(epilogue);
    }
    return [{ ...element, comments }].concat(next ? next[1] : []);
  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location,
    );
  }

  function error(message, location) {
    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return '';
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: 'literal', text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: 'class', parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: 'any' };
  }

  function peg$endExpectation() {
    return { type: 'end' };
  }

  function peg$otherExpectation(description) {
    return { type: 'other', description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && typeof peg$source.offset === 'function') {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location,
    );
  }

  function peg$parseStart() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$currPos;
    s3 = peg$parseCommentBlock();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseSourceElements();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse___();
      if (s6 !== peg$FAILED) {
        s7 = peg$parseComment();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parse___();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseComment();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse__();
      peg$savedPos = s0;
      s0 = peg$f0(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFreeCharacter() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseLineTerminator();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseCommentIndicator();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f1(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhiteSpace() {
    let s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r0.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e1);
      }
    }

    return s0;
  }

  function peg$parseLineTerminator() {
    let s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e2);
      }
    }

    return s0;
  }

  function peg$parseLineTerminatorSequence() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e3);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c1) {
        s0 = peg$c1;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e4);
        }
      }
      if (s0 === peg$FAILED) {
        s0 = input.charAt(peg$currPos);
        if (peg$r2.test(s0)) {
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e5);
          }
        }
      }
    }

    return s0;
  }

  function peg$parseComment() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseCommentIndicator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$parseLineTerminator();
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e0);
            }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f2(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommentIndicator() {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c2) {
      s0 = peg$c2;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e6);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 33) {
        s0 = peg$c3;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e7);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s0 = peg$c4;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e8);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c5) {
            s0 = peg$c5;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e9);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLiteral() {
    let s0;

    s0 = peg$parseBooleanLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumericLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTimerLiteral();
      }
    }

    return s0;
  }

  function peg$parseUnits() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseAND();
    if (s2 === peg$FAILED) {
      s2 = peg$parseOR();
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e10);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e10);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c5) {
          s4 = peg$c5;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e9);
          }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e11);
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseUnits();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f3(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumericLiteral() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e12);
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseDecimalLiteral();
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = input.charAt(peg$currPos);
      if (peg$r4.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e13);
        }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parseUnits();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f4(s1, s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDecimalLiteral() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDecimalIntegerLiteral();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e14);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r5.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r5.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e15);
            }
          }
        }
        s4 = peg$parseExponentPart();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f5();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e14);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r5.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = input.charAt(peg$currPos);
            if (peg$r5.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e15);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExponentPart();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f6();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDecimalIntegerLiteral();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseExponentPart();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f7();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseDecimalIntegerLiteral() {
    let s0, s1, s2, s3;

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c9;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e16);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.charAt(peg$currPos);
      if (peg$r6.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e17);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r5.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r5.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e15);
            }
          }
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseExponentPart() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseExponentIndicator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSignedInteger();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExponentIndicator() {
    let s0;

    s0 = input.charAt(peg$currPos);
    if (s0.toLowerCase() === peg$c10) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e18);
      }
    }

    return s0;
  }

  function peg$parseSignedInteger() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e19);
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r5.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e15);
      }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r5.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBooleanLiteral() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTRUE();
    if (s1 === peg$FAILED) {
      s1 = peg$parseFALSE();
      if (s1 === peg$FAILED) {
        s1 = input.charAt(peg$currPos);
        if (peg$r8.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e20);
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e21);
        }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f8(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReserved() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 === peg$FAILED) {
      s1 = peg$parseIS();
      if (s1 === peg$FAILED) {
        s1 = peg$parseAS();
        if (s1 === peg$FAILED) {
          s1 = peg$parseAND();
          if (s1 === peg$FAILED) {
            s1 = peg$parseOR();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e21);
        }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifier() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReserved();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r10.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e22);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r10.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e22);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f9(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameterName() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReserved();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r11.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e23);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r11.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e23);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$currPos;
        peg$silentFails++;
        s7 = peg$parseReserved();
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = undefined;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = input.charAt(peg$currPos);
          if (peg$r11.test(s8)) {
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e23);
            }
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = input.charAt(peg$currPos);
              if (peg$r11.test(s8)) {
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e23);
                }
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parse_();
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parseReserved();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = undefined;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = input.charAt(peg$currPos);
              if (peg$r11.test(s8)) {
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e23);
                }
              }
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = input.charAt(peg$currPos);
                  if (peg$r11.test(s8)) {
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e23);
                    }
                  }
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f10(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameter() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r5.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e15);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r5.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseBooleanLiteral();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseParameterName();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s1, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTimerLiteral() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTIMER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 35) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e24);
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r5.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e15);
        }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r5.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e15);
            }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f12(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseACTION() {
    let s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c12) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e25);
      }
    }

    return s0;
  }

  function peg$parseALIAS() {
    let s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c13) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e26);
      }
    }

    return s0;
  }

  function peg$parseAND() {
    let s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c14) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e27);
      }
    }

    return s0;
  }

  function peg$parseAS() {
    let s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c15) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e28);
      }
    }

    return s0;
  }

  function peg$parseDOSE_PARAMETER_FILE() {
    let s0;

    s0 = input.substr(peg$currPos, 19);
    if (s0.toLowerCase() === peg$c16) {
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e29);
      }
    }

    return s0;
  }

  function peg$parseEND() {
    let s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c17) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e30);
      }
    }

    return s0;
  }

  function peg$parseEND_TIME() {
    let s0;

    s0 = input.substr(peg$currPos, 8);
    if (s0.toLowerCase() === peg$c18) {
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e31);
      }
    }

    return s0;
  }

  function peg$parseFALSE() {
    let s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c19) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e32);
      }
    }

    return s0;
  }

  function peg$parseFUNCTION() {
    let s0;

    s0 = input.substr(peg$currPos, 8);
    if (s0.toLowerCase() === peg$c20) {
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e33);
      }
    }

    return s0;
  }

  function peg$parseIF() {
    let s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c21) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e34);
      }
    }

    return s0;
  }

  function peg$parseINCLUDE() {
    let s0;

    s0 = input.substr(peg$currPos, 7);
    if (s0.toLowerCase() === peg$c22) {
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e35);
      }
    }

    return s0;
  }

  function peg$parseINITIATORS() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 9);
    if (s1.toLowerCase() === peg$c23) {
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e36);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (s2.toLowerCase() === peg$c24) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e37);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f13();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIS() {
    let s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c25) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e38);
      }
    }

    return s0;
  }

  function peg$parseLOOKUP_VARIABLE() {
    let s0;

    s0 = input.substr(peg$currPos, 15);
    if (s0.toLowerCase() === peg$c26) {
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e39);
      }
    }

    return s0;
  }

  function peg$parseOFF() {
    let s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c27) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e40);
      }
    }

    return s0;
  }

  function peg$parseON() {
    let s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c28) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e41);
      }
    }

    return s0;
  }

  function peg$parseOR() {
    let s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c29) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e42);
      }
    }

    return s0;
  }

  function peg$parsePARAMETER_CHANGE() {
    let s0;

    s0 = input.substr(peg$currPos, 16);
    if (s0.toLowerCase() === peg$c30) {
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e43);
      }
    }

    return s0;
  }

  function peg$parsePARAMETER_FILE() {
    let s0;

    s0 = input.substr(peg$currPos, 14);
    if (s0.toLowerCase() === peg$c31) {
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e44);
      }
    }

    return s0;
  }

  function peg$parsePLOTFIL() {
    let s0;

    s0 = input.substr(peg$currPos, 7);
    if (s0.toLowerCase() === peg$c32) {
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e45);
      }
    }

    return s0;
  }

  function peg$parseSENSITIVITY() {
    let s0;

    s0 = input.substr(peg$currPos, 11);
    if (s0.toLowerCase() === peg$c33) {
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e46);
      }
    }

    return s0;
  }

  function peg$parseSET() {
    let s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c34) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e47);
      }
    }

    return s0;
  }

  function peg$parseTIMER() {
    let s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c35) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e48);
      }
    }

    return s0;
  }

  function peg$parseTITLE() {
    let s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c36) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e49);
      }
    }

    return s0;
  }

  function peg$parseTRUE() {
    let s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c37) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e50);
      }
    }

    return s0;
  }

  function peg$parseUSEREVT() {
    let s0;

    s0 = input.substr(peg$currPos, 7);
    if (s0.toLowerCase() === peg$c38) {
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e51);
      }
    }

    return s0;
  }

  function peg$parseWHEN() {
    let s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c39) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e52);
      }
    }

    return s0;
  }

  function peg$parse___() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWhiteSpace();
    if (s2 === peg$FAILED) {
      s2 = peg$parseLineTerminatorSequence();
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWhiteSpace();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminatorSequence();
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parse__() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWhiteSpace();
    if (s2 === peg$FAILED) {
      s2 = peg$parseLineTerminatorSequence();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLineTerminatorSequence();
      }
    }
    peg$savedPos = s0;
    s1 = peg$f15(s1);
    s0 = s1;

    return s0;
  }

  function peg$parse_() {
    let s0, s1;

    s0 = [];
    s1 = peg$parseWhiteSpace();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhiteSpace();
    }

    return s0;
  }

  function peg$parseArguments() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseExpressionType();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c40;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e53);
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseArguments();
        if (s6 !== peg$FAILED) {
          s3 = [s3, s4, s5, s6];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f16(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCallExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c41;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e54);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseArguments();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c42;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e55);
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionOperator() {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c5) {
      s0 = peg$c5;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e9);
      }
    }
    if (s0 === peg$FAILED) {
      s0 = input.charAt(peg$currPos);
      if (peg$r12.test(s0)) {
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e56);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c43) {
          s0 = peg$c43;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e57);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c44) {
            s0 = peg$c44;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e58);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = input.charAt(peg$currPos);
            if (peg$r13.test(s0)) {
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e59);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c45) {
                s0 = peg$c45;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e60);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c46) {
                  s0 = peg$c46;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e61);
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseExpressionType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpressionOperator();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 === peg$FAILED) {
          s5 = peg$parseExpressionType();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionBlock() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e54);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpr();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c42;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e55);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseUnits();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f19(s2, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionType() {
    let s0;

    s0 = peg$parseCallExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseExpressionBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parseVariable();
      }
    }

    return s0;
  }

  function peg$parseAssignment() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCallExpression();
    if (s1 === peg$FAILED) {
      s1 = peg$parseIdentifier();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c47;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e62);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpr();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIsExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseVariable();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEND_TIME();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpr();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAsExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVariable();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiPartExpression() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 === peg$FAILED) {
      s1 = peg$parseIsExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseExpressionBlock();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parseCommentBlock();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse__();
      s4 = peg$parseAND();
      if (s4 === peg$FAILED) {
        s4 = peg$parseOR();
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpr();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23(s1, s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpr() {
    let s0;

    s0 = peg$parseMultiPartExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIsExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseExpressionType();
        }
      }
    }

    return s0;
  }

  function peg$parseVariable() {
    let s0;

    s0 = peg$parseCallExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseParameterName();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIdentifier();
        }
      }
    }

    return s0;
  }

  function peg$parseSensitivityStatement() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSENSITIVITY();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseON();
      if (s3 === peg$FAILED) {
        s3 = peg$parseOFF();
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f24(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTitleStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseTITLE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseComment();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse___();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parseTitleBlock();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse___();
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parseTitleBlock();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse___();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$currPos;
        s7 = peg$parseCommentBlock();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse___();
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseEND();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s3, s5, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTitleBlock() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseCommentBlock();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse___();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$parseEND();
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseFreeCharacter();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseFreeCharacter();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseComment();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f26(s1, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFileStatement() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsePARAMETER_FILE();
    if (s1 === peg$FAILED) {
      s1 = peg$parseDOSE_PARAMETER_FILE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINCLUDE();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseFreeCharacter();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseFreeCharacter();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f27(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlockStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePARAMETER_CHANGE();
    if (s1 === peg$FAILED) {
      s1 = peg$parseINITIATORS();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseComment();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parse___();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseSourceElements();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$currPos;
      s6 = peg$parse___();
      if (s6 !== peg$FAILED) {
        s7 = peg$parseCommentBlock();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parse___();
      if (s6 !== peg$FAILED) {
        s7 = peg$parseEND();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f28(s1, s3, s4, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionalBlockStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseWHEN();
    if (s1 === peg$FAILED) {
      s1 = peg$parseIF();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpr();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parseComment();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$currPos;
        s6 = peg$parse___();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseSourceElements();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$currPos;
        s7 = peg$parse___();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseCommentBlock();
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse___();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseEND();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f29(s1, s3, s4, s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAliasStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseALIAS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseComment();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse___();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parseSourceElements();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse___();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$currPos;
        s7 = peg$parseCommentBlock();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse___();
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseEND();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f30(s3, s5, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePlotFilStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsePLOTFIL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r5.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e15);
        }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r5.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e15);
            }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parseComment();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse___();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsePlotFilBody();
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse___();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsePlotFilBody();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$currPos;
        s7 = peg$parse__();
        s8 = peg$parseCommentBlock();
        if (s8 !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse___();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseEND();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f31(s3, s4, s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePlotFilList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseVariable();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c40;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e53);
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePlotFilList();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c40;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e53);
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePlotFilList();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f32(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePlotFilBody() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseCommentBlock();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse___();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsePlotFilList();
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseComment();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse___();
      if (s6 !== peg$FAILED) {
        s7 = peg$parsePlotFilBody();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parse___();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsePlotFilBody();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f33(s1, s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUserEvtStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseUSEREVT();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parseComment();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse___();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseSourceElements();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse___();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$currPos;
        s6 = peg$parseCommentBlock();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse___();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseEND();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f34(s2, s4, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActionStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseACTION();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 35) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e24);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r5.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r5.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e15);
              }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$parseComment();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse___();
          if (s6 !== peg$FAILED) {
            s7 = peg$currPos;
            s8 = peg$parseSourceElements();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse___();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$currPos;
            s9 = peg$parseCommentBlock();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse___();
              if (s10 !== peg$FAILED) {
                s9 = [s9, s10];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseEND();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f35(s4, s5, s7, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseFUNCTION();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c47;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e62);
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseExpr();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f36(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTimerStatement() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTimerLiteral();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f37(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLookupStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLOOKUP_VARIABLE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseVariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parseComment();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$currPos;
        s6 = peg$parse___();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseLookupBody();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse___();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseEND();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f38(s3, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLookupBody() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReserved();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseFreeCharacter();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseFreeCharacter();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLookupBody();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f39(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommentBlock() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseComment();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse___();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseCommentBlock();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f40(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSourceElements() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseCommentBlock();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse___();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseSourceElement();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseComment();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$currPos;
      s6 = peg$parse___();
      if (s6 !== peg$FAILED) {
        s7 = peg$parseSourceElements();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f41(s1, s2, s4, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSourceElement() {
    let s0;

    s0 = peg$parseSensitivityStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTitleStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFileStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBlockStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAssignment();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTimerStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$parseConditionalBlockStatement();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAsExpression();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseAliasStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsePlotFilStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseUserEvtStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseActionStatement();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseFunctionStatement();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseExpression();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseIsExpression();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseLookupStatement();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseParameter();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseLiteral();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseCallExpression();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseParameterName();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseIdentifier();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  const peg$success = peg$result !== peg$FAILED && peg$currPos === input.length;
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ {
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    };
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

const peg$allowedStartRules = ['Start'];

export { peg$allowedStartRules as StartRules, peg$SyntaxError as SyntaxError, peg$parse as parse };
