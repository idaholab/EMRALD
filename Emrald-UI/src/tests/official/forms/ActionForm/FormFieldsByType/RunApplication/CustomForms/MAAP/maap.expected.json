{
  "loads and parses files": {
    "objType": "Action",
    "name": "loads and parses files",
    "desc": "",
    "actType": "atRunExtApp",
    "exePath": "",
    "formData": {
      "caType": "MAAP",
      "docComments": {},
      "exePath": "C:/MAAP.exe",
      "fileRefs": ["Test.PAR", "Test.INC"],
      "initiators": [
        {
          "comment": " Doc comment",
          "name": "INIT1",
          "value": true
        },
        {
          "comment": "",
          "name": "INIT2",
          "value": 0
        }
      ],
      "inputBlocks": [
        {
          "type": "conditional_block",
          "blockType": "WHEN",
          "test": {
            "type": "expression",
            "value": {
              "left": {
                "type": "identifier",
                "value": "TIM"
              },
              "op": ">=",
              "right": {
                "type": "number",
                "units": "S",
                "value": 0
              }
            }
          },
          "value": [
            {
              "target": {
                "type": "identifier",
                "value": "INIT1"
              },
              "type": "assignment",
              "value": {
                "type": "boolean",
                "value": false
              }
            }
          ]
        }
      ],
      "inputFile": {},
      "inputFileName": "Test.INP",
      "inputPath": "C:/Test.INP",
      "parameterFile": {},
      "parameterFileName": "Test.PAR",
      "parameterPath": "C:/Test.PAR",
      "parameters": [
        {
          "name": "PARAM1",
          "useVariable": false,
          "value": 5
        },
        {
          "name": "PARAM2(1)",
          "useVariable": false,
          "value": 6
        }
      ],
      "possibleInitiators": [],
      "sourceElements": [
        {
          "type": "sensitivity",
          "value": "ON"
        },
        {
          "type": "title",
          "value": "TESTINP"
        },
        {
          "fileType": "PARAMETER FILE",
          "type": "file",
          "value": "Test.PAR"
        },
        {
          "fileType": "INCLUDE",
          "type": "file",
          "value": "Test.INC"
        },
        {
          "type": "block",
          "blockType": "PARAMETER CHANGE",
          "value": [
            {
              "target": {
                "type": "identifier",
                "value": "PARAM1"
              },
              "type": "assignment",
              "value": {
                "type": "number",
                "value": 5
              }
            },
            {
              "target": {
                "arguments": [
                  {
                    "type": "number",
                    "value": 1
                  }
                ],
                "type": "call_expression",
                "value": {
                  "type": "identifier",
                  "value": "PARAM2"
                }
              },
              "type": "assignment",
              "value": {
                "type": "number",
                "value": 6
              }
            }
          ]
        },
        {
          "type": "alias",
          "value": [
            {
              "target": {
                "type": "identifier",
                "value": "PARAM1"
              },
              "type": "as_expression",
              "value": {
                "type": "parameter_name",
                "value": "ALIAS PARAM"
              }
            }
          ]
        },
        {
          "type": "block",
          "blockType": "INITIATORS",
          "value": [
            {
              "target": {
                "type": "identifier",
                "value": "INIT1"
              },
              "type": "assignment",
              "value": {
                "type": "boolean",
                "value": true
              }
            },
            {
              "type": "comment",
              "value": " Doc comment"
            },
            {
              "target": {
                "type": "identifier",
                "value": "INIT2"
              },
              "type": "assignment",
              "value": {
                "type": "number",
                "value": 0
              }
            }
          ]
        },
        {
          "blockType": "WHEN",
          "test": {
            "type": "expression",
            "value": {
              "left": {
                "type": "identifier",
                "value": "TIM"
              },
              "op": ">=",
              "right": {
                "type": "number",
                "units": "S",
                "value": 0
              }
            }
          },
          "type": "conditional_block",
          "value": [
            {
              "target": {
                "type": "identifier",
                "value": "INIT1"
              },
              "type": "assignment",
              "value": {
                "type": "boolean",
                "value": false
              }
            }
          ]
        },
        {
          "target": {
            "type": "parameter_name",
            "value": "PRINT INTERVAL"
          },
          "type": "is_expression",
          "value": {
            "type": "number",
            "value": 50
          }
        },
        {
          "target": {
            "type": "parameter_name",
            "value": "START TIME"
          },
          "type": "is_expression",
          "value": {
            "type": "number",
            "units": "HR",
            "value": 0
          }
        },
        {
          "target": {
            "type": "parameter_name",
            "value": "END TIME"
          },
          "type": "is_expression",
          "value": {
            "type": "number",
            "units": "HR",
            "value": 10
          }
        },
        {
          "type": "plotfil",
          "n": 100,
          "value": [
            [
              {
                "type": "parameter_name",
                "value": "TIME IN SECONDS"
              }
            ],
            [
              {
                "type": "parameter_name",
                "value": "ALIAS PARAM"
              }
            ]
          ]
        }
      ],
      "title": "TESTINP"
    },
    "mainItem": true,
    "makeInputFileCode": "string exeLoc = \"C:/MAAP.exe\";\n        string paramLoc = \"C:/Test.PAR\";\n        string inpLoc = \"C:/Test.INP\";\n        string newInp = @\"SENSITIVITY ON\nTITLE\nTESTINP\nEND\nPARAMETER FILE Test.PAR\nINCLUDE Test.INC\nPARAMETER CHANGE\nPARAM1 = 5\nPARAM2(1) = 6\nEND\nALIAS\nPARAM1 AS ALIAS PARAM\nEND\nINITIATORS\nINIT1 = T\nINIT2 = 0\nEND\nWHEN TIM >= 0 S\nINIT1 = F\nEND\nPRINT INTERVAL IS 50\nSTART TIME IS 0 HR\nEND TIME IS 10 HR\nPLOTFIL 100\nTIME IN SECONDS\nALIAS PARAM\nEND\n\";\n        string fileRefs = \"Test.PAR,Test.INC\"; //example \"PVGS_502.par, test.txt\";\n        string[] fileRefsList = fileRefs.Split(',');\n        \n        if (!Path.IsPathRooted(exeLoc))\n        {\n          exeLoc = Path.Join(Directory.GetCurrentDirectory(), exeLoc);\n        }\n        if (!Path.IsPathRooted(paramLoc))\n        {\n          paramLoc = Path.Join(Directory.GetCurrentDirectory(), paramLoc);\n        }\n        if (!Path.IsPathRooted(inpLoc))\n        {\n          inpLoc = Path.Join(Directory.GetCurrentDirectory(), inpLoc);\n        }\n        \n        string tempLoc = Path.Join(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"EMRALD_MAAP\");\n        try\n        {\n          if (Directory.Exists(tempLoc))\n          {\n            Directory.Delete(tempLoc, true);\n          }\n          Directory.CreateDirectory(tempLoc);\n        }\n        catch { }\n        if (File.Exists(paramLoc))\n        {\n          File.Copy(paramLoc, Path.Join(tempLoc, Path.GetFileName(paramLoc)));\n        }\n        \n        string paramFileName = Path.GetFileName(paramLoc);\n        string inpFileName = Path.GetFileName(inpLoc);\n        string inpLocPath = Path.GetDirectoryName(inpLoc);\n        foreach (string fileRef in fileRefsList)\n        {\n          string fileRefPath = Path.Join(inpLocPath, fileRef);\n          if (File.Exists(fileRefPath))\n          {\n            if (fileRef != paramFileName)\n            File.Copy(fileRefPath, Path.Join(tempLoc, fileRef));\n          }\n          else\n          {\n            Console.WriteLine(\"Missing MAAP referenced file - \" + Path.Join(inpLocPath, fileRef));\n          }\n        }\n        string exeName = Path.GetFileName(exeLoc);\n        if (File.Exists(exeLoc))\n        {\n          File.Copy(exeLoc, Path.Join(tempLoc, exeName));\n        }\n        string dllPath = Path.Join(Path.GetDirectoryName(exeLoc), exeName[..^7] + \".dll\");\n        if (File.Exists(dllPath))\n        {\n          File.Copy(dllPath, Path.Join(tempLoc, Path.GetFileName(dllPath)));\n        }\n        \n        string newInpLoc = Path.Join(tempLoc, inpFileName);\n        System.IO.File.WriteAllText(newInpLoc, newInp);\n        return $\"{Path.Join(tempLoc, exeName)} {inpFileName} {paramFileName}\";",
    "processOutputFileCode": "string inpLoc = @\"C:/Test.INP\";\n  if (!Path.IsPathRooted(inpLoc))\n        inpLoc = RootPath + inpLoc;\n    string docVarPath = @\"./MAAP/temp.log\";\n  if (!Path.IsPathRooted(docVarPath))\n        docVarPath = RootPath + docVarPath;\n  string resLoc = Path.Join(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"EMRALD_MAAP\", Path.GetFileNameWithoutExtension(inpLoc) + \".log\");\n  File.Copy(resLoc, docVarPath, true);",
    "raType": "custom",
    "returnProcess": "rtNone"
  }
}
