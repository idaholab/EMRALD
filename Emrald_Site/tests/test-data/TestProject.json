{
  "id": 0,
  "name": "TestProject",
  "desc": "",
  "version": 1.2,
  "DiagramList": [
    {
      "Diagram": {
        "id": 1,
        "name": "Main",
        "desc": "",
        "diagramType": "dtPlant",
        "diagramTemplate": "",
        "diagramLabel": "Plant",
        "states": [
          "State1",
          "State2"
        ]
      }
    },
    {
      "Diagram": {
        "id": 2,
        "name": "Component",
        "desc": "",
        "diagramType": "dtComponent",
        "diagramTemplate": "",
        "diagramLabel": "Component",
        "states": [
          "State3",
          "State4"
        ],
        "singleStates": []
      }
    }
  ],
  "ExtSimList": [
    {
      "ExtSim": {
        "id": 1,
        "name": "ExtSim1",
        "resourceName": "Google Chrome",
        "modelRef": "",
        "states": [],
        "configData": "",
        "simMaxTime": ""
      }
    }
  ],
  "StateList": [
    {
      "State": {
        "id": 1,
        "name": "State1",
        "desc": "",
        "stateType": "stStandard",
        "diagramName": "Main",
        "immediateActions": [
          "TestTransition",
          "TestCngVar",
          "TestOpenErrorPro",
          "TestRunApp",
          "TestExtSim"
        ],
        "events": [],
        "eventActions": [],
        "geometry": "{ x: 412.8993225097656, y: 171.71876525878906, width: 200, height: 170}"
      }
    },
    {
      "State": {
        "id": 2,
        "name": "State2",
        "desc": "",
        "stateType": "stStandard",
        "diagramName": "Main",
        "immediateActions": [],
        "events": [
          "TestStateChange",
          "TestComponentLogic",
          "TestTimer",
          "TestFailureRate",
          "TestExtSim",
          "TestDistribution"
        ],
        "eventActions": [
          {
            "actions": [
              "Goto_Action2"
            ],
            "moveFromCurrent": false
          },
          {
            "actions": [],
            "moveFromCurrent": false
          },
          {
            "actions": [],
            "moveFromCurrent": false
          },
          {
            "actions": [],
            "moveFromCurrent": false
          },
          {
            "actions": [],
            "moveFromCurrent": false
          },
          {
            "actions": [],
            "moveFromCurrent": false
          }
        ],
        "geometry": "{ x: 895.12158203125, y: 317.2743225097656, width: 200, height: 280}"
      }
    },
    {
      "State": {
        "id": 3,
        "name": "State3",
        "desc": "",
        "stateType": "stStandard",
        "diagramName": "Component",
        "immediateActions": [],
        "events": [],
        "eventActions": [],
        "geometry": "{ x: 350.0173645019531, y: 188.5590362548828, width: 200, height: 80}"
      }
    },
    {
      "State": {
        "id": 4,
        "name": "State4",
        "desc": "",
        "stateType": "stStandard",
        "diagramName": "Component",
        "immediateActions": [],
        "events": [],
        "eventActions": [],
        "geometry": "{ x: 631.1284790039062, y: 225.2257080078125, width: 200, height: 80}"
      }
    }
  ],
  "ActionList": [
    {
      "Action": {
        "id": 1,
        "name": "TestTransition",
        "desc": "",
        "actType": "atTransition",
        "mainItem": false,
        "mutExcl": true,
        "newStates": [
          {
            "toState": "State2",
            "prob": 1,
            "varProb": "Int_",
            "failDesc": ""
          }
        ]
      }
    },
    {
      "Action": {
        "id": 2,
        "name": "TestCngVar",
        "desc": "",
        "actType": "atCngVarVal",
        "mainItem": false,
        "mutExcl": true,
        "newStates": [],
        "scriptCode": "Bool_",
        "variableName": "Int_",
        "codeVariables": [
          "Bool_"
        ]
      }
    },
    {
      "Action": {
        "id": 3,
        "name": "TestOpenErrorPro",
        "desc": "",
        "actType": "atRunExtApp",
        "mainItem": false,
        "mutExcl": true,
        "newStates": [],
        "makeInputFileCode": "System.IO.File.WriteAllText(\"model.xml\", \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><epl>    <model initial_element=\\\"Generator\\\">        <element name=\\\"Battery\\\">            <epc>(gPower=HAS_POWER)&amp;(bLoad&lt;9)-&gt;1:(bPower'=HAS_POWER)&amp;(bLoad'=bLoad+1);</epc>            <epc>(gPower=HAS_POWER)&amp;(bLoad=9)-&gt;1:(bPower'=HAS_POWER)&amp;(bLoad'=bLoad);</epc>            <epc>(gPower=NO_POWER)&amp;(bLoad&gt;0)-&gt;1:(bPower'=HAS_POWER)&amp;(bLoad'=bLoad-1);</epc>            <epc>(gPower=NO_POWER)&amp;(bLoad=0)-&gt;1:(bPower'=NO_POWER)&amp;(bLoad'=bLoad);</epc>        </element>        <element name=\\\"Device\\\"/>        <element name=\\\"Generator\\\">            <epc>(gState1=OK)-&gt;\"+Int_+\":(gPower'=HAS_POWER)&amp;(gState1'=OK)+1-\"+Int_+\":(gPower'=NO_POWER)&amp;(gState1'=FAIL);</epc>            <epc>(gState1=FAIL)-&gt;1:(gPower'=NO_POWER)&amp;(gState1'=FAIL);</epc>        </element>        <data name=\\\"gState1\\\" values=\\\"OK, FAIL\\\"/>        <data name=\\\"gPower\\\" values=\\\"HAS_POWER, NO_POWER\\\"/>        <data name=\\\"bPower\\\" values=\\\"HAS_POWER, NO_POWER\\\"/>        <data initial_value=\\\"5\\\" name=\\\"bLoad\\\" values=\\\"0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\\"/>        <control_flow from=\\\"Battery\\\" to=\\\"Device\\\"/>        <control_flow from=\\\"Device\\\" to=\\\"Generator\\\"/>        <control_flow from=\\\"Generator\\\" to=\\\"Battery\\\"/>        <data_flow from=\\\"Battery\\\" to=\\\"bPower\\\"/>        <data_flow from=\\\"Battery\\\" to=\\\"bLoad\\\"/>        <data_flow from=\\\"gPower\\\" to=\\\"Battery\\\"/>        <data_flow from=\\\"bLoad\\\" to=\\\"Battery\\\"/>        <data_flow from=\\\"bPower\\\" to=\\\"Device\\\"/>        <data_flow from=\\\"Generator\\\" to=\\\"gPower\\\"/>        <data_flow from=\\\"Generator\\\" to=\\\"gState1\\\"/>        <data_flow from=\\\"gState1\\\" to=\\\"Generator\\\"/>        <failure name=\\\"Battery_Low\\\">bLoad&lt;3</failure>        <failure name=\\\"Generator_Down\\\">gState1=FAIL</failure>        <failure name=\\\"Failure\\\">bPower=NO_POWER</failure>    </model></epl>\");return \"--model \\\"model.xml\\\" --method compute_execution_time --target \\\"Battery_Low\\\" --step-range \\\"0:10:100\\\" --prism \\\"\\\" --results \\\"results.json\\\"\";",
        "exePath": "",
        "processOutputFileCode": "",
        "codeVariables": [
          "Int_",
          "Str_2"
        ],
        "formData": {
          "model": "<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><epl>    <model initial_element=\\\"Generator\\\">        <element name=\\\"Battery\\\">            <epc>(gPower=HAS_POWER)&amp;(bLoad&lt;9)-&gt;1:(bPower'=HAS_POWER)&amp;(bLoad'=bLoad+1);</epc>            <epc>(gPower=HAS_POWER)&amp;(bLoad=9)-&gt;1:(bPower'=HAS_POWER)&amp;(bLoad'=bLoad);</epc>            <epc>(gPower=NO_POWER)&amp;(bLoad&gt;0)-&gt;1:(bPower'=HAS_POWER)&amp;(bLoad'=bLoad-1);</epc>            <epc>(gPower=NO_POWER)&amp;(bLoad=0)-&gt;1:(bPower'=NO_POWER)&amp;(bLoad'=bLoad);</epc>        </element>        <element name=\\\"Device\\\"/>        <element name=\\\"Generator\\\">            <epc>(gState1=OK)-&gt;\"+Int_+\":(gPower'=HAS_POWER)&amp;(gState1'=OK)+1-\"+Int_+\":(gPower'=NO_POWER)&amp;(gState1'=FAIL);</epc>            <epc>(gState1=FAIL)-&gt;1:(gPower'=NO_POWER)&amp;(gState1'=FAIL);</epc>        </element>        <data name=\\\"gState1\\\" values=\\\"OK, FAIL\\\"/>        <data name=\\\"gPower\\\" values=\\\"HAS_POWER, NO_POWER\\\"/>        <data name=\\\"bPower\\\" values=\\\"HAS_POWER, NO_POWER\\\"/>        <data initial_value=\\\"5\\\" name=\\\"bLoad\\\" values=\\\"0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\\"/>        <control_flow from=\\\"Battery\\\" to=\\\"Device\\\"/>        <control_flow from=\\\"Device\\\" to=\\\"Generator\\\"/>        <control_flow from=\\\"Generator\\\" to=\\\"Battery\\\"/>        <data_flow from=\\\"Battery\\\" to=\\\"bPower\\\"/>        <data_flow from=\\\"Battery\\\" to=\\\"bLoad\\\"/>        <data_flow from=\\\"gPower\\\" to=\\\"Battery\\\"/>        <data_flow from=\\\"bLoad\\\" to=\\\"Battery\\\"/>        <data_flow from=\\\"bPower\\\" to=\\\"Device\\\"/>        <data_flow from=\\\"Generator\\\" to=\\\"gPower\\\"/>        <data_flow from=\\\"Generator\\\" to=\\\"gState1\\\"/>        <data_flow from=\\\"gState1\\\" to=\\\"Generator\\\"/>        <failure name=\\\"Battery_Low\\\">bLoad&lt;3</failure>        <failure name=\\\"Generator_Down\\\">gState1=FAIL</failure>        <failure name=\\\"Failure\\\">bPower=NO_POWER</failure>    </model></epl>",
          "modelName": "battery.xml",
          "prismPath": "",
          "varLinks": [
            {
              "prismMethod": "compute_execution_time",
              "target": "Battery_Low",
              "variable": {
                "id": 4,
                "name": "Str_2"
              }
            }
          ],
          "modified": []
        },
        "returnProcess": "rtNone",
        "template": {
          "name": "Open Error Pro",
          "path": "./ExecuteCustomForms/openerror.html"
        },
        "updateVariables": [
          {
            "id": 4,
            "name": "Str_2",
            "desc": "",
            "varScope": "gtDocLink",
            "value": "",
            "docLink": "$.output[0].result",
            "docType": "dtJSON",
            "docPath": "results.json",
            "pathMustExist": false,
            "type": "double"
          }
        ]
      }
    },
    {
      "Action": {
        "id": 4,
        "name": "TestRunApp",
        "desc": "",
        "actType": "atRunExtApp",
        "mainItem": false,
        "mutExcl": true,
        "newStates": [],
        "makeInputFileCode": "Bool_",
        "exePath": "",
        "processOutputFileCode": "Bool_",
        "codeVariables": [
          "Bool_"
        ],
        "formData": {}
      }
    },
    {
      "Action": {
        "id": 5,
        "name": "TestExtSim",
        "desc": "",
        "actType": "at3DSimMsg",
        "mainItem": false,
        "mutExcl": true,
        "newStates": [],
        "sim3DMessage": "atCompModify",
        "extSim": "ExtSim1",
        "sim3DVariable": "Str_3"
      }
    },
    {
      "Action": {
        "id": 6,
        "name": "Goto_Action2",
        "desc": "",
        "actType": "atTransition",
        "mainItem": false,
        "mutExcl": true,
        "newStates": [],
        "moveFromCurrent": false
      }
    }
  ],
  "EventList": [
    {
      "Event": {
        "id": 1,
        "name": "TestStateChange",
        "desc": "",
        "mainItem": false,
        "evType": "etStateCng",
        "allItems": true,
        "triggerStates": [
          "State1"
        ],
        "moveFromCurrent": false,
        "varNames": [],
        "ifInState": "true",
        "evalCurOnInitial": true
      }
    },
    {
      "Event": {
        "id": 2,
        "name": "TestComponentLogic",
        "desc": "",
        "mainItem": false,
        "evType": "etComponentLogic",
        "allItems": true,
        "triggerStates": [],
        "moveFromCurrent": false,
        "varNames": [],
        "onSuccess": false,
        "logicTop": "LogicTree1"
      }
    },
    {
      "Event": {
        "id": 3,
        "name": "TestTimer",
        "desc": "",
        "mainItem": false,
        "evType": "etTimer",
        "allItems": true,
        "triggerStates": [],
        "moveFromCurrent": false,
        "varNames": [],
        "useVariable": true,
        "time": "Int_",
        "timeVariableUnit": "trDays",
        "onVarChange": "ocResample"
      }
    },
    {
      "Event": {
        "id": 4,
        "name": "TestFailureRate",
        "desc": "",
        "mainItem": false,
        "evType": "etFailRate",
        "allItems": true,
        "triggerStates": [],
        "moveFromCurrent": false,
        "varNames": [],
        "lambda": "Int_",
        "lambdaTimeRate": "P0DT0H5M0S",
        "useVariable": true,
        "onVarChange": "ocIgnore"
      }
    },
    {
      "Event": {
        "id": 5,
        "name": "TestExtSim",
        "desc": "",
        "mainItem": false,
        "evType": "et3dSimEv",
        "allItems": true,
        "triggerStates": [],
        "moveFromCurrent": false,
        "varNames": [
          "Int_"
        ],
        "variable": "Str_3",
        "code": "Int_"
      }
    },
    {
      "Event": {
        "id": 6,
        "name": "TestDistribution",
        "desc": "",
        "mainItem": false,
        "evType": "etDistribution",
        "allItems": true,
        "triggerStates": [],
        "moveFromCurrent": false,
        "varNames": [],
        "distType": "dtNormal",
        "parameters": [
          {
            "name": "Mean",
            "value": 24,
            "timeRate": "trHours",
            "useVariable": false
          },
          {
            "name": "Standard Deviation",
            "value": 1,
            "timeRate": "trHours",
            "useVariable": true,
            "variable": "Int_"
          },
          {
            "name": "Minimum",
            "value": 0,
            "timeRate": "trHours",
            "useVariable": false
          },
          {
            "name": "Maximum",
            "value": 1000,
            "timeRate": "trYears",
            "useVariable": false
          }
        ],
        "dfltTimeRate": "trHours",
        "onVarChange": "ocIgnore"
      }
    },
    {
      "Event": {
        "id": 7,
        "name": "TestVarCond",
        "desc": "",
        "mainItem": true,
        "evType": "etVarCond",
        "varNames": [
          "Int_"
        ],
        "Code": "return 1.0;",
        "sim3dID": 1,
        "code": "Int_"
      }
    }
  ],
  "LogicNodeList": [
    {
      "LogicNode": {
        "id": 1,
        "name": "LogicTree1",
        "desc": "",
        "gateType": "gtAnd",
        "rootName": "LogicTree1",
        "compChildren": [
          "Component"
        ],
        "gateChildren": [
          "gate_2"
        ]
      }
    },
    {
      "LogicNode": {
        "id": 2,
        "name": "gate_2",
        "desc": "",
        "gateType": "gtOr",
        "rootName": "LogicTree1",
        "compChildren": [],
        "gateChildren": []
      }
    }
  ],
  "VariableList": [
    {
      "Variable": {
        "id": 1,
        "name": "Int_",
        "desc": "",
        "varScope": "gtGlobal",
        "value": 0,
        "resetOnRuns": true,
        "type": "int"
      }
    },
    {
      "Variable": {
        "id": 2,
        "name": "Str_",
        "desc": "",
        "varScope": "gtGlobal",
        "value": "",
        "resetOnRuns": true,
        "type": "string"
      }
    },
    {
      "Variable": {
        "id": 3,
        "name": "Bool_",
        "desc": "",
        "varScope": "gtGlobal",
        "value": true,
        "resetOnRuns": true,
        "type": "bool"
      }
    },
    {
      "Variable": {
        "id": 4,
        "name": "Str_2",
        "desc": "",
        "varScope": "gtDocLink",
        "value": "",
        "docLink": "$.output[0].result",
        "docType": "dtJSON",
        "docPath": "results.json",
        "pathMustExist": false,
        "type": "double"
      }
    },
    {
      "Variable": {
        "id": 5,
        "name": "Str_3",
        "desc": "",
        "varScope": "gt3DSim",
        "value": "",
        "resetOnRuns": true,
        "type": "string",
        "sim3DId": "Str_3"
      }
    },
    {
      "Variable": {
        "id": 6,
        "name": "TestAccrual",
        "desc": "",
        "varScope": "gtAccrual",
        "value": 0,
        "accrualStatesData": [
          {
            "stateName": "State3",
            "type": "ctMultiplier",
            "accrualMult": 1,
            "multRate": "trHours",
            "accrualTable": [],
            "$$hashKey": "008"
          }
        ],
        "type": "double"
      }
    }
  ],
  "templates": []
}