interface ICallback {
  (...args: any[]): any;
}
//----------------------
// These code just to make mxClient available to fool TS.
// mxClient in js is a global object.
class MyClient {
  IS_QUIRKS: boolean = false;
  public isBrowserSupported(): boolean {
    return true;
  }
}

class MyUtils {
  public error(message: string, width: number, close: boolean, icon?: string) {}
  public button(value: string, clickHandler: ICallback): HTMLElement { return null;}
  public makeDraggable(element: HTMLElement, graphF: Examples.mxGraph, funct: ICallback, dragElement?: HTMLElement,
    dx?: number, dy?: number, autoscroll?: boolean, scalePreview?: boolean, highlightDropTargets?: boolean, getDropTarget?: Examples.mxCell) { }
}

if (typeof mxClient === 'undefined') {
  //just to fool TypeScript.
  var mxClient = new MyClient();

}

if (typeof mxUtils === 'undefined') {
  var mxUtils = new MyUtils();
}
//-----------------------------
module Examples {
  export interface mxImage { }
  declare var mxImage: {
    new (imgUrl: string, width: number, height: number): mxImage;
    (imgUrl: string, width: number, height: number): mxImage;
    prototype: mxImage;
  }

  export interface mxToolbar {
    enabled: boolean;
    addLine();
    addMode(title: string, icon: string, funct: ICallback, pressedIcon?: string, style?: string, toggle?: boolean): HTMLElement;

  }
  declare var mxToolbar: {
    new (container: HTMLElement): mxToolbar;
    (container: HTMLElement): mxToolbar;
    prototype: mxToolbar;
  }

  export interface mxDivResizer {
  }
  declare var mxDivResizer: {
    new (container: HTMLElement): mxDivResizer;
    (container: HTMLElement): mxDivResizer;
    prototype: mxDivResizer;
  }

  export interface mxGraphModel {
    cloneCell(cell: mxCell): mxCell;
  }

  declare var mxGraphModel: {
    new (): mxGraphModel;
    (): mxGraphModel;
    prototype: mxGraphModel;
  }


  export interface mxRectangle {
    x: number;
    y: number;
    width: number;
    height: number;
  }
  declare var mxRectangle: {
    new (x: number, y: number, width: number, height: number): mxRectangle;
    (x: number, y: number, width: number, height: number): mxRectangle;
    prototype: mxRectangle;
  }

  export interface mxGraphView {
    getBounds(cells: mxCell[]): mxRectangle;
  }
  declare var mxGraphView: {
    new (graph: mxGraph): mxGraphView;
    (graph: mxGraph): mxGraphView;
    prototype: mxGraphView;
  }

  export interface mxPoint {
    x: number;
    y: number;
  }

  export interface mxGraph {
    setConnectable(isconnected: boolean);
    setMultigraph(isMulti: boolean);
    isSelectionEmpty(): boolean;
    getSelectionCells(): mxCell[];
    getView(): mxGraphView;
    stopEditing(cancel: boolean);
    getPointForEvent(evt: Event): mxPoint;

    importCells(cells: mxCell[], dx: number, dy: number): mxCell[];
    setSelectionCells(clones: mxCell[]);
    getModel(): mxGraphModel;
    addCell(vertex: mxCell);
    setSelectionCell(vertex: mxCell);

  }

  declare var mxGraph: {
    new (container: HTMLElement, model: mxGraphModel): mxGraph;
    (container: HTMLElement, model: mxGraphModel): mxGraph;
    prototype: mxGraph;
  }

  export interface mxKeyHandler {
  }
  declare var mxKeyHandler: {
    new (graph: mxGraph): mxKeyHandler;
    (graph: mxGraph): mxKeyHandler;
    prototype: mxKeyHandler;
  }
  export interface mxRubberband {
  }

  declare var mxRubberband: {
    new (graph: mxGraph): mxRubberband;
    (graph: mxGraph): mxRubberband;
    prototype: mxRubberband;
  }

  export interface mxGeometry {
    x: number;
    y: number;
    width: number;
    height: number;
  }
  declare var mxGeometry: {
    new (x: number, y: number, width: number, height: number): mxGeometry;
    (x: number, y: number, width: number, height: number): mxGeometry;
    prototype: mxGeometry;
  }

  export interface mxCell {
    setVertex(isVertex: boolean);
    geometry: mxGeometry;
  }
  declare var mxCell: {
    new (value: any, geometry: mxGeometry, style: string): mxCell;
    (value: any, geometry: mxGeometry, style: string): mxCell;
    prototype: mxCell;
  }


  export class Toolbar {
    constructor() {
      this.setup();
    }

    public setup() {
      var connetImage: mxImage = new mxImage('images/connector.gif', 16, 16);
      if (!mxClient.isBrowserSupported()) {
        mxUtils.error('Browser is not supported!', 200, false);
        return;
      }

      var tbContainer: HTMLElement = document.createElement('div');
      tbContainer.style.position = 'absolute';
      tbContainer.style.overflow = 'hidden';
      tbContainer.style.padding = '2px';
      tbContainer.style.left = '0px';
      tbContainer.style.top = '26px';
      tbContainer.style.width = '24px';
      tbContainer.style.bottom = '0px';

      document.body.appendChild(tbContainer);

      // Creates new toolbar without event processing
      this.toolbar = new mxToolbar(tbContainer);
      this.toolbar.enabled = false

      // Creates the div for the graph
      var container: HTMLElement = document.createElement('div');
      container.style.position = 'absolute';
      container.style.overflow = 'hidden';
      container.style.left = '24px';
      container.style.top = '26px';
      container.style.right = '0px';
      container.style.bottom = '0px';
      container.style.background = 'url("sample_images/grid.gif")';

      document.body.appendChild(container);

      // Workaround for Internet Explorer ignoring certain styles
      if (mxClient.IS_QUIRKS) {
        document.body.style.overflow = 'hidden';
        new mxDivResizer(tbContainer);
        new mxDivResizer(container);
      }

      // Creates the model and the graph inside the container
      // using the fastest rendering available on the browser
      this.model = new mxGraphModel();
      this.graph = new mxGraph(container, this.model);

      // Enables new connections in the graph
      this.graph.setConnectable(true);
      this.graph.setMultigraph(false);

      // Stops editing on enter or escape keypress
      var keyHandler = new mxKeyHandler(this.graph);
      var rubberband = new mxRubberband(this.graph);

      this.addVertex('sample_images/rectangle.gif', 100, 40, '');
      this.addVertex('sample_images/rounded.gif', 100, 40, 'shape=rounded');
      this.addVertex('sample_images/ellipse.gif', 40, 40, 'shape=ellipse');
      this.addVertex('sample_images/rhombus.gif', 40, 40, 'shape=rhombus');
      this.addVertex('sample_images/triangle.gif', 40, 40, 'shape=triangle');
      this.addVertex('sample_images/cylinder.gif', 40, 40, 'shape=cylinder');
      this.addVertex('sample_images/actor.gif', 30, 40, 'shape=actor');
      this.toolbar.addLine();

      var button: HTMLElement = mxUtils.button('Create toolbar entry from selection', this.onButtonClick);
      button.style.position = 'absolute';
      button.style.left = '2px';
      button.style.top = '2px';
      document.body.appendChild(button);
    }

    public toolbar: mxToolbar = null;
    public model: mxGraphModel = null;
    public graph: mxGraph = null;

    public addVertex(icon: string, w: number, h: number, style: string) {
      var vertex = new mxCell(null, new mxGeometry(0, 0, w, h), style);
      vertex.setVertex(true);

      this.addToolbarItem(this.graph, this.toolbar, vertex, icon);
    }

    public addToolbarItem(graph: mxGraph, toolbar: mxToolbar, prototype: mxCell, image: string) {
      // Function that is executed when the image is dropped on
      // the graph. The cell argument points to the cell under
      // the mousepointer if there is one.
      var funct = function (graph: mxGraph, evt: Event, cell: mxCell) {
        graph.stopEditing(false);

        var pt: mxPoint = graph.getPointForEvent(evt);
        var vertex: mxCell = graph.getModel().cloneCell(prototype);
        
        
        vertex.geometry.x = pt.x;
        vertex.geometry.y = pt.y;

        graph.addCell(vertex);
        graph.setSelectionCell(vertex);
      }

			// Creates the image which is used as the drag icon (preview)
      var img: HTMLElement = toolbar.addMode(null, image, funct);
      mxUtils.makeDraggable(img, graph, funct);

    }

    public onButtonClick(evt: Event) {
      if (!this.graph.isSelectionEmpty()) {
        var cells: mxCell[] = this.graph.getSelectionCells();
        var bounds: mxRectangle = this.graph.getView().getBounds(cells);

        // Function that is executed when the image is dropped on
        // the graph. The cell argument points to the cell under
        // the mousepointer if there is one.
        var funct = function (graph: mxGraph, evt: Event, cell: mxCell) {
          graph.stopEditing(false);

          var pt = graph.getPointForEvent(evt);
          var dx = pt.x - bounds.x;
          var dy = pt.y - bounds.y;

          var clones = graph.importCells(cells, dx, dy);
          graph.setSelectionCells(clones);
        }
      }
    }
  }
}

function main() {
  var toolbar = new Examples.Toolbar();
}