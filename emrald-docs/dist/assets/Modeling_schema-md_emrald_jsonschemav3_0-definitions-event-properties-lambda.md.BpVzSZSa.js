import{_ as e,c as t,o as a,a2 as i}from"./chunks/framework.BLHWSx9w.js";const _=JSON.parse('{"title":"Untitled undefined type in EMRALD_Model Schema","description":"","frontmatter":{},"headers":[],"relativePath":"Modeling/schema-md/emrald_jsonschemav3_0-definitions-event-properties-lambda.md","filePath":"Modeling/schema-md/emrald_jsonschemav3_0-definitions-event-properties-lambda.md"}'),n={name:"Modeling/schema-md/emrald_jsonschemav3_0-definitions-event-properties-lambda.md"},l=i('<h1 id="untitled-undefined-type-in-emrald-model-schema" tabindex="-1">Untitled undefined type in EMRALD_Model Schema <a class="header-anchor" href="#untitled-undefined-type-in-emrald-model-schema" aria-label="Permalink to &quot;Untitled undefined type in EMRALD\\_Model Schema&quot;">​</a></h1><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>EMRALD_Model#/definitions/Event/properties/lambda</span></span></code></pre></div><p>Optional. Parameter for a event with type of etFailRate. It is either a number or the name of a variable if useVariable is true</p><table tabindex="0"><thead><tr><th style="text-align:left;">Abstract</th><th style="text-align:left;">Extensible</th><th style="text-align:left;">Status</th><th style="text-align:left;">Identifiable</th><th style="text-align:left;">Custom Properties</th><th style="text-align:left;">Additional Properties</th><th style="text-align:left;">Access Restrictions</th><th style="text-align:left;">Defined In</th></tr></thead><tbody><tr><td style="text-align:left;">Can be instantiated</td><td style="text-align:left;">No</td><td style="text-align:left;">Unknown status</td><td style="text-align:left;">Unknown identifiability</td><td style="text-align:left;">Forbidden</td><td style="text-align:left;">Allowed</td><td style="text-align:left;">none</td><td style="text-align:left;"><a href="../../out/EMRALD_JsonSchemaV3_0.json" title="open original schema">EMRALD_JsonSchemaV3_0.json*</a></td></tr></tbody></table><h2 id="lambda-type" tabindex="-1">lambda Type <a class="header-anchor" href="#lambda-type" aria-label="Permalink to &quot;lambda Type&quot;">​</a></h2><p>merged type (<a href="./emrald_jsonschemav3_0-definitions-event-properties-lambda.html">Details</a>)</p><p>any of</p><ul><li><p><a href="./emrald_jsonschemav3_0-definitions-event-properties-lambda-anyof-0.html" title="check type definition">Untitled string in EMRALD_Model</a></p></li><li><p><a href="./emrald_jsonschemav3_0-definitions-event-properties-lambda-anyof-1.html" title="check type definition">Untitled number in EMRALD_Model</a></p></li></ul>',8),d=[l];function s(o,r,h,m,p,c){return a(),t("div",null,d)}const y=e(n,[["render",s]]);export{_ as __pageData,y as default};
